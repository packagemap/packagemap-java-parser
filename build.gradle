plugins {
  id "application"
  id 'java'
  id "com.diffplug.spotless" version "6.11.0"
}

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  implementation(
      "org.eclipse.jdt:org.eclipse.jdt.core:3.31.0",
      "com.google.googlejavaformat:google-java-format:1.15.0",
      "commons-io:commons-io:2.11.0",
      "commons-cli:commons-cli:1.5.0",
      "org.slf4j:slf4j-api:2.0.3",
      "ch.qos.logback:logback-classic:1.4.4",
      "ch.qos.logback:logback-core:1.4.4",
      "com.fasterxml.jackson.core:jackson-databind:2.14.0",
      "commons-codec:commons-codec:1.15",
      "me.tongfei:progressbar:0.9.5",
  )
  testImplementation(
      "org.mockito:mockito-core:4.4.0",
      "org.mockito:mockito-inline:4.4.0",
      "org.mockito:mockito-junit-jupiter:4.4.0",
      "org.assertj:assertj-core:3.23.1",
      "junit:junit:4.12",
      "com.github.tomakehurst:wiremock:2.27.2",
  )
}

group 'co.packagemap'
version '0.0.4'

java {
  sourceCompatibility = JavaVersion.VERSION_18
  targetCompatibility = JavaVersion.VERSION_18
}

compileJava {
  dependsOn spotlessApply
  options.encoding = 'UTF-8'
  options.compilerArgs << '-parameters'
}

compileTestJava {
  options.encoding = 'UTF-8'
}

application {
    mainClass = "co.packagemap.javaparser.Main"
}


jar {
  manifest {
    attributes 'Main-Class': 'co.packagemap.javaparser.Main'
  }
}

task fatJar(type: Jar) {
  manifest.from jar.manifest
  classifier = 'all'
  duplicatesStrategy = 'include'
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  } {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
    exclude "META-INF/LICENSE.txt"
    exclude "META-INF/NOTICE.txt"
    exclude "META-INF/INDEX.LIST"
  }
  with jar
}

artifacts {
    archives fatJar
}

spotless {
  java {
    googleJavaFormat()
  }
}
